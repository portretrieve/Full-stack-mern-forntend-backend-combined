{"version":3,"sources":["shared/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Map","props","mapRef","useRef","useEffect","map","window","google","maps","current","center","zoom","Marker","position","ref","className","style","PlaceItem","AUTH","useContext","AuthContext","useHttpClient","isLoading","errorState","sendRequest","clearError","useState","showMapModel","setShowMapModel","showDeleteModal","setShowDeleteModel","closeMapHandler","cancelDeleteWarningHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","error","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","foundPlacesByUserId","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"oQAyBeA,MArBf,SAAaC,GACX,IAAMC,EAASC,mBAWf,OATAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKR,IAAIE,EAAOO,QAAS,CACrDC,OAAQT,EAAMS,OACdC,KAAMV,EAAMU,OAGd,IAAIL,OAAOC,OAAOC,KAAKI,OAAO,CAAEC,SAAUZ,EAAMS,OAAQL,IAAKA,MAC5D,CAACJ,EAAMS,OAAQT,EAAMU,OAGtB,yBACEG,IAAKZ,EACLa,UAAS,cAASd,EAAMc,WACxBC,MAAOf,EAAMe,S,sCC4FJC,MAnGf,SAAmBhB,GACjB,IAAMiB,EAAOC,qBAAWC,KACxB,EAA2DC,cAAnDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,YAAaC,EAA5C,EAA4CA,WAE5C,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAIMC,EAAkB,kBAAMH,GAAgB,IAMxCI,EAA6B,WACjCF,GAAmB,IAEfG,EAAoB,uCAAG,sBAAAC,EAAA,+EAEnBV,EACJW,oDAAiDlC,EAAMmC,GACvD,SACA,KACA,CAAEC,cAAe,UAAYnB,EAAKoB,QANX,OASzBrC,EAAMsC,SAAStC,EAAMmC,IATI,sDAY3BN,GAAmB,GAZQ,wDAAH,qDAe1B,OACE,kBAAC,IAAMU,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAOnB,EAAYoB,QAASlB,IACxC,kBAACmB,EAAA,EAAD,CACEC,KAAMlB,EACNmB,SAAUf,EACVgB,OAAQ9C,EAAM+C,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAStB,GAAjB,UAER,yBAAKhB,UAAU,iBACb,kBAAC,EAAD,CAAKL,OAAQT,EAAMqD,YAAa3C,KAAM,OAG1C,kBAACiC,EAAA,EAAD,CACEC,KAAMhB,EACNiB,SAAUd,EACVe,OAAO,eACPG,YAAY,4BACZC,OACE,kBAAC,IAAMX,SAAP,KACE,kBAACY,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASrB,GAAzB,UAGA,kBAACoB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASpB,GAAxB,YAMJ,iFAEF,wBAAIlB,UAAU,cACZ,kBAAC0C,EAAA,EAAD,CAAM1C,UAAU,uBACbO,GAAa,kBAACoC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAK5C,UAAU,qBACb,yBACE6C,IAAKzB,yCAAkClC,EAAM4D,MAC7CC,IAAK7D,EAAM8D,SAGf,yBAAKhD,UAAU,oBACb,4BAAKd,EAAM8D,OACX,4BAAK9D,EAAM+C,SACX,2BAAI/C,EAAM+D,cAEZ,yBAAKjD,UAAU,uBACb,kBAACqC,EAAA,EAAD,CAAQG,SAAO,EAACF,QA1EH,kBAAMzB,GAAgB,KA0EnC,eAGCV,EAAK+C,SAAWhE,EAAMiE,WACrB,kBAACd,EAAA,EAAD,CAAQe,GAAE,kBAAalE,EAAMmC,KAA7B,QAEDlB,EAAK+C,SAAWhE,EAAMiE,WACrB,kBAACd,EAAA,EAAD,CAAQI,QAAM,EAACH,QA7EM,WAC/BvB,GAAmB,KA4ET,e,MC/DCsC,MA/Bf,SAAmBnE,GACjB,OAA2B,IAAvBA,EAAMoE,MAAMC,OAEZ,yBAAKvD,UAAU,qBACb,kBAAC0C,EAAA,EAAD,KACE,kEACA,kBAACL,EAAA,EAAD,CAAQe,GAAG,eAAX,oBAON,wBAAIpD,UAAU,cACXd,EAAMoE,MAAMhE,KAAI,SAACkE,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAMnC,GACXA,GAAImC,EAAMnC,GACVyB,MAAOU,EAAMV,MACbE,MAAOQ,EAAMR,MACbC,YAAaO,EAAMP,YACnBhB,QAASuB,EAAMvB,QACfkB,UAAWK,EAAME,QACjBnB,YAAaiB,EAAMG,SACnBnC,SAAUtC,EAAMsC,gBCkBXoC,UAzCf,WACE,MAAwCjD,mBAAS,IAAjD,mBAAOkD,EAAP,KAAqBC,EAArB,KACA,EAA2DxD,cAAnDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,YAAaC,EAA5C,EAA4CA,WAEtCwC,EAASa,cAAYb,OAsB3B,OApBA7D,qBAAU,YACS,uCAAG,4BAAA8B,EAAA,+EAEWV,EACzBW,yDAAsD8B,GAHxC,OAEVc,EAFU,OAMhBF,EAAgBE,EAAaC,qBANb,uGAAH,qDAUjBC,KACC,CAACzD,EAAayC,IASf,kBAAC,IAAMzB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAOnB,EAAYoB,QAASlB,IACvCH,GACC,yBAAKP,UAAU,UACb,kBAAC2C,EAAA,EAAD,QAGFpC,GAAasD,GACb,kBAAC,EAAD,CAAWP,MAAOO,EAAcrC,SAfX,SAAC2C,GAC1BL,GAAgB,SAACM,GAAD,OACdA,EAAWC,QAAO,SAACb,GAAD,OAAWA,EAAMnC,KAAO8C","file":"static/js/6.4e8ea8eb.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\nimport \"./Map.css\";\r\n\r\nfunction Map(props) {\r\n  const mapRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: props.center,\r\n      zoom: props.zoom\r\n    });\r\n\r\n    new window.google.maps.Marker({ position: props.center, map: map });\r\n  }, [props.center, props.zoom]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapRef}\r\n      className={`map ${props.className}`}\r\n      style={props.style}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/UIElements/Card\";\r\nimport Button from \"../../shared/FormElements/Button\";\r\nimport Modal from \"../../shared/UIElements/Modal\";\r\nimport Map from \"../../shared/UIElements/Map\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-Hook\";\r\nimport ErrorModal from \"../../shared/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/UIElements/LoadingSpinner\";\r\n\r\nimport \"./PlaceItem.css\";\r\n\r\nfunction PlaceItem(props) {\r\n  const AUTH = useContext(AuthContext);\r\n  const { isLoading, errorState, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [showMapModel, setShowMapModel] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModel] = useState(false);\r\n\r\n  const openMapHandler = () => setShowMapModel(true);\r\n\r\n  const closeMapHandler = () => setShowMapModel(false);\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowDeleteModel(true);\r\n  };\r\n\r\n  const cancelDeleteWarningHandler = () => {\r\n    setShowDeleteModel(false);\r\n  };\r\n  const confirmDeleteHandler = async () => {\r\n    try {\r\n      await sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL + \"/places/\" + props.id,\r\n        \"DELETE\",\r\n        null,\r\n        { Authorization: \"Bearer \" + AUTH.token }\r\n      );\r\n\r\n      props.onDelete(props.id);\r\n    } catch (error) {}\r\n\r\n    setShowDeleteModel(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={errorState} onClear={clearError} />\r\n      <Modal\r\n        show={showMapModel}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"place-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n        <div className=\"map-container\">\r\n          <Map center={props.coordinates} zoom={16} />\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        show={showDeleteModal}\r\n        onCancel={cancelDeleteWarningHandler}\r\n        header=\"Are you sure\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteWarningHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>Sure, you wanna delete? It can't be undone later!</p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img\r\n              src={process.env.REACT_APP_ASSET_URL + props.image}\r\n              alt={props.title}\r\n            />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={openMapHandler}>\r\n              VIEW ON MAP\r\n            </Button>\r\n            {AUTH.userId === props.creatorId && (\r\n              <Button to={`/places/${props.id}`}>EDIT</Button>\r\n            )}\r\n            {AUTH.userId === props.creatorId && (\r\n              <Button danger onClick={showDeleteWarningHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PlaceItem;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../../shared/UIElements/Card\";\r\nimport PlaceItem from \"./PlaceItem\";\r\nimport Button from \"../../shared/FormElements/Button\";\r\nimport \"./PlaceList.css\";\r\n\r\nfunction PlaceList(props) {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No Places found. Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Create a Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map((place) => (\r\n        <PlaceItem\r\n          key={place.id}\r\n          id={place.id}\r\n          image={place.image}\r\n          title={place.title}\r\n          description={place.description}\r\n          address={place.address}\r\n          creatorId={place.creator}\r\n          coordinates={place.location}\r\n          onDelete={props.onDelete}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default PlaceList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport ErrorModal from \"../../shared/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-Hook\";\r\n\r\nfunction UserPlaces() {\r\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\r\n  const { isLoading, errorState, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/places/user/\" + userId\r\n        );\r\n\r\n        setLoadedPlaces(responseData.foundPlacesByUserId);\r\n      } catch (error) {}\r\n    };\r\n\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeleteHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) =>\r\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={errorState} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && (\r\n        <PlaceList items={loadedPlaces} onDelete={placeDeleteHandler} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}